/**
 * In this sample script, we parse a text file that is uploaded to the script via an http request
 * Each line of the uses the CSV format and contains temperature _value,humidity_value,timestamp
 * The parsed content is used to create an array of JavaScript data structures that are published
 * to the dashboard, reflecting changes in real-time (as they arrive)
 * The implementation of this use case is a 3 steps process:
 * - step1: get the attached file from the request
 * - step2: parse the file to extract the metrics
 * - step3: publiish the metrics to the dashboard
 */

/*
 * STEP 1: get the attached file if any
 */

// "request" is an object that is automatically generated by scriptr.io when a script receives a request
// it contains multiple properties, such as notably the "files" property
// -- NOTE: In JavaScript a condition resolves to false if the tested variable is undefined, null, empty string, false or 0
// so the below instruction returns an empty array if the request did not contain any attached file -- END NOTE
if (!request.files) { 
    return [];
}

// if we are here, it means there is at least one attached file
// -- NOTE: the http protocol makes it is possible to post multiple files via an http request 
// using multiple "attachment" parameters, where each parameter can actually contain more than 
// one attached file -- END NOTE
// we assume there is only one attachment parameter, so we retrive the corresponding file list
var attachedFilesList = request.files[0]; 

// -- NOTE: if we know the name of this parameter, let's say for example it is "myfile", 
// an alternative to the above line is: var attachedFilesList = request.files.myFile; -- END NOTE

// we assume there is only one file attached through this parameter and we retrieve 
// the corresponding file data structure that is generated by scriptr.io 
var metricFileDataStructure = attachedFilesList[0]; 

// store the name of the file into a local variable (we don't really need this)
var fileName = metricFileDataStructure.fileName;

// store the content of the file into a local variable
var content = metricFileDataStructure.content;

/*
 * STEP 2: parse the content of the file
 */

// as a first step, we split that content into lines, assuming '\r\n' (carriage return, line feed)
// as line separator, 
var lines = content.split("\r\n"); 

// if there is no content, we return an empty array
if (!lines) {
    return [];
}

// if we are here, this means we found some content, therefore:
// the second step is to loop through the lines and parse each line assuming ',' as value separator. 
// In each iteration, we will: \
// - create a JavaScript data structure ("JSON") using the values that are parsed from each line
// - store the JavaScript data structure into an array ("metricArray")

var metricArray = []; // the array where we will store the JavaScript data structures

// loop through the array of lines
for (var i = 0; i < lines.length; i++) {

    // split the line: this results in an array with 3 values [temperature, humidity, timestamp]
    var valuesArray = lines[i].split(",");

    // using the array of values, create a JavaScript data structure 
    var metricDataStructure = { 
        "temperature": valuesArray[0],
        "humidity": valuesArray[1],
        "timestamp": new Date(Number(valuesArray[2])) // turn the timestamp string into number then into a date
    };

    // add the JavaScript data structure to the metric array
    metricArray.push(metricDataStructure);
}

/*
 * STEP 3: publish the array of JavaScript data structure to the channel
 * to which the dashboard is subscribed. We will target the linechart widget
 * to target a widget, we refer to the value of the "tag" property in the widget
 * -- NOTE: in scriptr.io, "channels" are powerful means to broadcast messages in real-time
 * to any subscribed entities, whether they are hosted by scriptr.io or remote entities
 */

// prepare the message structure for publishing. The exepcted format is:
// {"id": "<message tag value>", "result": "<static data structure>"}

var msgToLineChart = {
    "id": "dataLineChart", // this is the value of the tag property of the line chart widget
    "result": metricArray
};

// invoke the native "publish" function, passing the name of the channel to publish to, and the msg
publish("responseChannel", msgToLineChart);

// return the array of values. this is optional in our example
return metricArray;